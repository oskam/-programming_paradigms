declare
    fun {Append L1 L2}
       {FoldR L1 fun {$ H T} H|T end L2}
    end

    fun {Merge L1 L2 L3}
       fun {M Xs Ys}
          case Xs # Ys
          of nil # Ys then Ys
          [] Xs # nil then Xs
          [] (X|Xr) # (Y|Yr) then
    	 if X<Y then X|{M Xr Ys}
    	 else Y|{M Xs Yr} end
          end
       end
    in
       {M L1 {M L2 L3}}
    end

    fun {FindAll V T}
       case T
       of leaf then nil
       [] tree(key:Key val:Val left:L right:R) then
          if Val == V then {Merge {FindAll V L} [Key] {FindAll V R}}
          else {Append {FindAll V L} {FindAll V R}} end
       end
    end

   Tree = tree(key:d
	       val:42
	       left:tree(key:b
			 val:1
			 left:tree(key:a
				   val:42
				   left:leaf
				   right:leaf)
			 right:tree(key:c
				    val:0
				    left:leaf
				    right:leaf))
	       right:tree(key:e
			  val:42
			  left:leaf
			  right:leaf))

   {Browse {FindAll 42 Tree}}